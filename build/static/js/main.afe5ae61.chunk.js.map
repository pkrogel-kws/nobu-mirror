{"version":3,"sources":["usePath.js","use-slerp.js","use-layers.js","use-render-target.js","ThinFilmFresnelMap.js","data.js","Scene1.js","DotEffects.js","DotsScene.js","index.js"],"names":["usePath","initialPath","window","location","pathname","substr","React","useState","path","setPath","useEffect","__UPDATE_ROUTE","route","console","log","onpopstate","onhashchange","history","pushState","useSlerp","group","useRef","viewport","useThree","useMemo","THREE","rotationEuler","rotationQuaternion","useFrame","mouse","current","x","width","y","height","set","setFromEuler","quaternion","slerp","useLayers","layers","ref","disableAll","sort","forEach","layer","enable","useRenderTarget","settings","renderTarget","renderTargetSettings","format","generateMipmaps","cubeCamera","gl","scene","update","ThinFilmFresnelMap","filmThickness","refractiveIndexFilm","refractiveIndexBase","size","this","_filmThickness","_refractiveIndexFilm","_refractiveIndexBase","_size","_data","Uint8Array","_updateData","call","needsUpdate","prototype","Object","create","get","value","updateSettings","_fresnelRefl","refractiveIndex1","refractiveIndex2","cos1","cos2","R","phi","sin1Sqr","refrRatio","sqrRefrRatio","Math","atan","sqrt","r_p","r_s","PI","xFit_1931","lambda","t1","t2","t3","exp","yFit_1931","zFit_1931","data","phi12","phi21","phi23","R12","T12","R23","R_bi","T_tot","R_star","R_bi_sqr","R_12_star","R_star_t_tot","refrRatioSqr","refrRatioSqrBase","i","cosThetaI","cosThetaT","cosThetaT2","pathDiff","pathDiff2PI","z","totX","totY","totZ","j","waveLen","deltaPhase","cosPhiX","cos","cosPhiY","v","wx","wy","wz","r","g","b","clamp","k","floor","mirrorsData","mirrors","args","position","rotation","TEXT_PROPS","fontSize","font","Title","props","lookAt","textRef","name","depthTest","material-toneMapped","material-color","Mirror","sideMaterial","reflectionMaterial","material","Mirrors","envMap","thinFilmFresnelMap","useResource","map","color","mirror","index","key","TitleCopies","vertices","vertex","Scene","useMatcapTexture","matcapTexture","matcap","side","transparent","opacity","texture","extend","EffectComposer","ShaderPass","SavePass","RenderPass","triColorMix","uniforms","tDiffuse1","tDiffuse2","tDiffuse3","vertexShader","fragmentShader","Effects","composer","savePass","blendPass","swap","camera","rtA","rtB","pixelRatio","getPixelRatio","setSize","render","delay1","delay2","attachArray","needsSwap","FXAAShader","uniforms-resolution-value-x","uniforms-resolution-value-y","CopyShader","roundedSquareWave","t","delta","a","f","sin","Dots","duration","positions","Array","distances","transform","vec","useLayoutEffect","origin","right","random","distanceTo","angleTo","setPosition","setMatrixAt","dist","wave","clock","elapsedTime","copy","multiplyScalar","instanceMatrix","App","orthographic","colorManagement","zoom","attach","Loader","progress","useProgress","center","style","concurrent","shadowMap","fov","fallback","Scene1","intensity","Body","className","document","querySelector"],"mappings":"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","file":"static/js/main.afe5ae61.chunk.js","sourcesContent":["import React from 'react'\n\n// I wanted to synchronize my app state with the path using pushstate, but I didn't\n// want the full overhead of React Router.\n\n// This turned out to do the job perfectly\n\nconst usePath = () => {\n  const initialPath = window.location.pathname.substr(1)\n\n  const [path, setPath] = React.useState(initialPath)\n\n  const changePath = (path) => {\n    window.history.pushState({}, path, `/${path}`)\n    setPath(path)\n  }\n\n  React.useEffect(() => {\n    window.__UPDATE_ROUTE = (route) => {\n      console.log('window.__UPDATE_ROUTE', route)\n      setPath(route)\n    }\n\n    window.onpopstate = () => {\n      setPath(window.location.pathname.substr(1))\n    }\n    return () => {\n      window.onhashchange = null\n    }\n  }, [])\n\n  return [path, changePath]\n}\n\nexport default usePath\n","import { useMemo, useRef } from 'react'\r\nimport * as THREE from 'three'\r\nimport { useFrame, useThree } from 'react-three-fiber'\r\n\r\nfunction useSlerp() {\r\n  const group = useRef()\r\n  const { viewport } = useThree()\r\n\r\n  const [rotationEuler, rotationQuaternion] = useMemo(\r\n    () => [new THREE.Euler(0, 0, 0), new THREE.Quaternion(0, 0, 0, 0)],\r\n    []\r\n  )\r\n\r\n  useFrame(({ mouse }) => {\r\n    if (!group.current) return\r\n\r\n    const x = (mouse.x * viewport.width) / 100\r\n    const y = (mouse.y * viewport.height) / 100\r\n    rotationEuler.set(y, x, 0)\r\n    rotationQuaternion.setFromEuler(rotationEuler)\r\n    group.current.quaternion.slerp(rotationQuaternion, 0.1)\r\n  })\r\n\r\n  return group\r\n}\r\n\r\nexport default useSlerp\r\n","import { useEffect, useRef } from 'react'\r\n\r\nfunction useLayers(layers = [0]) {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current.layers.disableAll()\r\n\r\n    layers.sort().forEach((layer) => {\r\n      ref.current.layers.enable(layer)\r\n    })\r\n  })\r\n\r\n  return ref\r\n}\r\n\r\nexport default useLayers\r\n","import { useMemo, useRef } from 'react'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from 'react-three-fiber'\r\n\r\nfunction useRenderTarget(settings = {}) {\r\n  const renderTarget = useMemo(() => {\r\n    const renderTargetSettings = {\r\n      format: THREE.RGBAFormat,\r\n      generateMipmaps: true\r\n    }\r\n\r\n    return new THREE.WebGLCubeRenderTarget(1024, {\r\n      ...renderTargetSettings,\r\n      ...settings\r\n    })\r\n  }, [settings])\r\n\r\n  const cubeCamera = useRef()\r\n\r\n  useFrame(({ gl, scene }) => {\r\n    if (!cubeCamera.current) return\r\n    cubeCamera.current.update(gl, scene)\r\n  })\r\n\r\n  return [cubeCamera, renderTarget]\r\n}\r\n\r\nexport default useRenderTarget\r\n","/**\r\n * @classdesc\r\n * ThinFilmFresnelMap is a lookup texture containing the reflection colour. The texture index value\r\n * is dot(normal, view). The texture values are stored in approximated gamma space (power 2.0), so\r\n * the sampled value needs to be multiplied with itself before use. The sampled value should replace\r\n * the fresnel factor in a PBR material.\r\n *\r\n * @property filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\r\n * @property refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\r\n * @property refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\r\n *\r\n * @constructor\r\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\r\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\r\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\r\n * @param size The width of the texture. Defaults to 64.\r\n *\r\n * @extends DataTexture\r\n *\r\n * @author David Lenaerts <http://www.derschmale.com>\r\n */\r\nimport * as THREE from 'three'\r\n\r\nexport function ThinFilmFresnelMap(filmThickness, refractiveIndexFilm, refractiveIndexBase, size) {\r\n  this._filmThickness = filmThickness || 500.0\r\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\r\n  this._refractiveIndexBase = refractiveIndexBase || 3\r\n  this._size = size || 128\r\n  this._data = new Uint8Array(this._size * 4)\r\n\r\n  this._updateData()\r\n\r\n  THREE.DataTexture.call(\r\n    this,\r\n    this._data,\r\n    this._size,\r\n    1,\r\n    THREE.RGBAFormat,\r\n    THREE.UnsignedByteType,\r\n    THREE.UVMapping,\r\n    THREE.RepeatWrapping,\r\n    THREE.RepeatWrapping,\r\n    THREE.LinearFilter,\r\n    THREE.LinearMipMapLinearFilter\r\n  )\r\n  this.generateMipmaps = true\r\n  this.needsUpdate = true\r\n}\r\n\r\nThinFilmFresnelMap.prototype = Object.create(THREE.DataTexture.prototype, {\r\n  filmThickness: {\r\n    get: function () {\r\n      return this._filmThickness\r\n    },\r\n    set: function (value) {\r\n      this._filmThickness = value\r\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\r\n    }\r\n  },\r\n  refractiveIndexFilm: {\r\n    get: function () {\r\n      return this._refractiveIndexFilm\r\n    },\r\n    set: function (value) {\r\n      this._refractiveIndexFilm = value\r\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\r\n    }\r\n  },\r\n  refractiveIndexBase: {\r\n    get: function () {\r\n      return this._refractiveIndexBase\r\n    },\r\n    set: function (value) {\r\n      this._refractiveIndexBase = value\r\n      this.updateSettings(this._filmThickness, this._refractiveIndexFilm, this._refractiveIndexBase)\r\n    }\r\n  }\r\n})\r\n\r\n/**\r\n * Regenerates the lookup texture given new data.\r\n * @param filmThickness The thickness of the thin film layer in nanometers. Defaults to 380.\r\n * @param refractiveIndexFilm The refractive index of the thin film. Defaults to 2.\r\n * @param refractiveIndexBase The refractive index of the material under the film. Defaults to 3.\r\n */\r\nThinFilmFresnelMap.prototype.updateSettings = function (filmThickness, refractiveIndexFilm, refractiveIndexBase) {\r\n  this._filmThickness = filmThickness || 380\r\n  this._refractiveIndexFilm = refractiveIndexFilm || 2\r\n  this._refractiveIndexBase = refractiveIndexBase || 3\r\n  this._updateData()\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nThinFilmFresnelMap.prototype._fresnelRefl = function (refractiveIndex1, refractiveIndex2, cos1, cos2, R, phi) {\r\n  // r is amplitudinal, R is power\r\n  var sin1Sqr = 1.0 - cos1 * cos1 // = sin^2(incident)\r\n  var refrRatio = refractiveIndex1 / refractiveIndex2\r\n\r\n  if (refrRatio * refrRatio * sin1Sqr > 1.0) {\r\n    // total internal reflection\r\n    R.x = 1.0\r\n    R.y = 1.0\r\n\r\n    var sqrRefrRatio = refrRatio * refrRatio\r\n    // it looks like glsl's atan ranges are different from those in JS?\r\n    phi.x = 2.0 * Math.atan((-sqrRefrRatio * Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio)) / cos1)\r\n    phi.y = 2.0 * Math.atan(-Math.sqrt(sin1Sqr - 1.0 / sqrRefrRatio) / cos1)\r\n  } else {\r\n    var r_p = (refractiveIndex2 * cos1 - refractiveIndex1 * cos2) / (refractiveIndex2 * cos1 + refractiveIndex1 * cos2)\r\n    var r_s = (refractiveIndex1 * cos1 - refractiveIndex2 * cos2) / (refractiveIndex1 * cos1 + refractiveIndex2 * cos2)\r\n\r\n    phi.x = r_p < 0.0 ? Math.PI : 0.0\r\n    phi.y = r_s < 0.0 ? Math.PI : 0.0\r\n\r\n    R.x = r_p * r_p\r\n    R.y = r_s * r_s\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nThinFilmFresnelMap.prototype._updateData = function () {\r\n  var filmThickness = this._filmThickness\r\n  var refractiveIndexFilm = this._refractiveIndexFilm\r\n  var refractiveIndexBase = this._refractiveIndexBase\r\n  var size = this._size\r\n\r\n  // approximate CIE XYZ weighting functions from: http://jcgt.org/published/0002/02/01/paper.pdf\r\n  function xFit_1931(lambda) {\r\n    var t1 = (lambda - 442.0) * (lambda < 442.0 ? 0.0624 : 0.0374)\r\n    var t2 = (lambda - 599.8) * (lambda < 599.8 ? 0.0264 : 0.0323)\r\n    var t3 = (lambda - 501.1) * (lambda < 501.1 ? 0.049 : 0.0382)\r\n    return 0.362 * Math.exp(-0.5 * t1 * t1) + 1.056 * Math.exp(-0.5 * t2 * t2) - 0.065 * Math.exp(-0.5 * t3 * t3)\r\n  }\r\n\r\n  function yFit_1931(lambda) {\r\n    var t1 = (lambda - 568.8) * (lambda < 568.8 ? 0.0213 : 0.0247)\r\n    var t2 = (lambda - 530.9) * (lambda < 530.9 ? 0.0613 : 0.0322)\r\n    return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2)\r\n  }\r\n\r\n  function zFit_1931(lambda) {\r\n    var t1 = (lambda - 437.0) * (lambda < 437.0 ? 0.0845 : 0.0278)\r\n    var t2 = (lambda - 459.0) * (lambda < 459.0 ? 0.0385 : 0.0725)\r\n    return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2)\r\n  }\r\n\r\n  var data = this._data\r\n  var phi12 = new THREE.Vector2()\r\n  var phi21 = new THREE.Vector2()\r\n  var phi23 = new THREE.Vector2()\r\n  var R12 = new THREE.Vector2()\r\n  var T12 = new THREE.Vector2()\r\n  var R23 = new THREE.Vector2()\r\n  var R_bi = new THREE.Vector2()\r\n  var T_tot = new THREE.Vector2()\r\n  var R_star = new THREE.Vector2()\r\n  var R_bi_sqr = new THREE.Vector2()\r\n  var R_12_star = new THREE.Vector2()\r\n  var R_star_t_tot = new THREE.Vector2()\r\n\r\n  var refrRatioSqr = 1.0 / (refractiveIndexFilm * refractiveIndexFilm)\r\n  var refrRatioSqrBase = (refractiveIndexFilm * refractiveIndexFilm) / (refractiveIndexBase * refractiveIndexBase)\r\n\r\n  // RGB is too limiting, so we use the entire spectral domain, but using limited samples (64) to\r\n  // create more pleasing bands\r\n  var numBands = 64\r\n  var waveLenRange = 780 - 380 // the entire visible range\r\n\r\n  for (var i = 0; i < size; ++i) {\r\n    var cosThetaI = i / size\r\n    var cosThetaT = Math.sqrt(1 - refrRatioSqr * (1.0 - cosThetaI * cosThetaI))\r\n    var cosThetaT2 = Math.sqrt(1 - refrRatioSqrBase * (1.0 - cosThetaT * cosThetaT))\r\n\r\n    // this is essentially the extra distance traveled by a ray if it bounds through the film\r\n    var pathDiff = 2.0 * refractiveIndexFilm * filmThickness * cosThetaT\r\n    var pathDiff2PI = 2.0 * Math.PI * pathDiff\r\n\r\n    this._fresnelRefl(1.0, refractiveIndexFilm, cosThetaI, cosThetaT, R12, phi12)\r\n    T12.x = 1.0 - R12.x\r\n    T12.y = 1.0 - R12.y\r\n    phi21.x = Math.PI - phi12.x\r\n    phi21.y = Math.PI - phi12.y\r\n\r\n    // this concerns the base layer\r\n    this._fresnelRefl(refractiveIndexFilm, refractiveIndexBase, cosThetaT, cosThetaT2, R23, phi23)\r\n    R_bi.x = Math.sqrt(R23.x * R12.x)\r\n    R_bi.y = Math.sqrt(R23.y * R12.y)\r\n    T_tot.x = Math.sqrt(T12.x * T12.x)\r\n    T_tot.y = Math.sqrt(T12.y * T12.y)\r\n    R_star.x = (T12.x * T12.x * R23.x) / (1.0 - R23.x * R12.x)\r\n    R_star.y = (T12.y * T12.y * R23.y) / (1.0 - R23.y * R12.y)\r\n    R_bi_sqr.x = R_bi.x * R_bi.x\r\n    R_bi_sqr.y = R_bi.y * R_bi.y\r\n    R_12_star.x = R12.x + R_star.x\r\n    R_12_star.y = R12.y + R_star.y\r\n    R_star_t_tot.x = R_star.x - T_tot.x\r\n    R_star_t_tot.y = R_star.y - T_tot.y\r\n    var x = 0,\r\n      y = 0,\r\n      z = 0\r\n    var totX = 0,\r\n      totY = 0,\r\n      totZ = 0\r\n\r\n    // TODO: we could also put the thickness in the look-up table, make it a 2D table\r\n    for (var j = 0; j < numBands; ++j) {\r\n      var waveLen = 380 + (j / (numBands - 1)) * waveLenRange\r\n      var deltaPhase = pathDiff2PI / waveLen\r\n\r\n      var cosPhiX = Math.cos(deltaPhase + phi23.x + phi21.x)\r\n      var cosPhiY = Math.cos(deltaPhase + phi23.y + phi21.y)\r\n      var valX =\r\n        R_12_star.x +\r\n        ((2.0 * (R_bi.x * cosPhiX - R_bi_sqr.x)) / (1.0 - 2 * R_bi.x * cosPhiX + R_bi_sqr.x)) * R_star_t_tot.x\r\n      var valY =\r\n        R_12_star.y +\r\n        ((2.0 * (R_bi.y * cosPhiY - R_bi_sqr.y)) / (1.0 - 2 * R_bi.y * cosPhiY + R_bi_sqr.y)) * R_star_t_tot.y\r\n      var v = 0.5 * (valX + valY)\r\n\r\n      var wx = xFit_1931(waveLen)\r\n      var wy = yFit_1931(waveLen)\r\n      var wz = zFit_1931(waveLen)\r\n\r\n      totX += wx\r\n      totY += wy\r\n      totZ += wz\r\n\r\n      x += wx * v\r\n      y += wy * v\r\n      z += wz * v\r\n    }\r\n\r\n    x /= totX\r\n    y /= totY\r\n    z /= totZ\r\n\r\n    var r = 3.2406 * x - 1.5372 * y - 0.4986 * z\r\n    var g = -0.9689 * x + 1.8758 * y + 0.0415 * z\r\n    var b = 0.0557 * x - 0.204 * y + 1.057 * z\r\n\r\n    r = THREE.Math.clamp(r, 0.0, 1.0)\r\n    g = THREE.Math.clamp(g, 0.0, 1.0)\r\n    b = THREE.Math.clamp(b, 0.0, 1.0)\r\n\r\n    // linear to gamma\r\n    r = Math.sqrt(r)\r\n    g = Math.sqrt(g)\r\n    b = Math.sqrt(b)\r\n\r\n    // CIE XYZ to linear rgb conversion matrix:\r\n    // 3.2406 -1.5372 -0.4986\r\n    // -0.9689  1.8758  0.0415\r\n    // 0.0557 -0.2040  1.0570\r\n\r\n    var k = i << 2\r\n    data[k] = Math.floor(r * 0xff)\r\n    data[k + 1] = Math.floor(g * 0xff)\r\n    data[k + 2] = Math.floor(b * 0xff)\r\n    data[k + 3] = 0xff\r\n  }\r\n\r\n  this.needsUpdate = true\r\n}\r\n","export const mirrorsData = {\n  mirrors: [\n    {\n      args: [2.87483173052424, 2.920755196190408, 0.05],\n      position: [3.116376203948097, -2.1742814140991196, -7.998859699752443],\n      rotation: [1.2536197471688286, -1.6683567077395978, -2.8428053193736256]\n    },\n    {\n      args: [1.799233278635274, 1.9642524560408021, 0.05],\n      position: [-3.325473394997085, 3.5307542721423446, -6.530151273151705],\n      rotation: [1.3951213133257899, -0.2888432911308304, 0.7178380971731012]\n    },\n    {\n      args: [2.8780801433198553, 2.9065216543855974, 0.05],\n      position: [1.2839348832937714, 2.888947614684322, -6.467835086028824],\n      rotation: [-1.3341775957580109, 2.8031736269533125, -0.18771283594857274]\n    },\n    //\n    {\n      args: [2.2175936863874006, 1.3820832190972703, 0.05],\n      // position: [4.552400557892, 0.9814639517113943, -5.836395383986279],\n      position: [-4.1542927375782015, -0.349560252979882, -2.489538720961452],\n\n      rotation: [-2.3299625953354437, 0.6139693063561498, -0.3902201705507059]\n    },\n    {\n      args: [1.7446126775638997, 2.6211835436253392, 0.05],\n      position: [-2.826056860647832, -3.0308788716782042, -5.4685371584057485],\n      rotation: [-1.4052581815125295, 3.002812728418492, 2.54202362440499]\n    },\n    {\n      args: [1.139549518339333, 1.8007363020629232, 0.05],\n      position: [-0.041834072623521124, -1.351281881742426, -2.40411451302583],\n      rotation: [1.2848394396618561, -0.310029190116405, -2.107987000676972]\n    },\n    {\n      //\n      args: [2.2021865186914007, 2.610358395964105, 0.05],\n      // position: [-4.1542927375782015, -0.349560252979882, -2.489538720961452],\n      position: [4.552400557892, 0.9814639517113943, -5.836395383986279],\n\n      rotation: [1.4401104979160235, 1.8179123712769852, -2.2157249608220475]\n    },\n    {\n      args: [2.0964670262303393, 1.5750930602784585, 0.05],\n      position: [6.571372497652996, -2.6457284555412066, -6.252562745592483],\n      rotation: [1.1870955922970219, 0.5335941225301444, 0.4523391139946649]\n    },\n    {\n      args: [1.3270056676441064, 1.5169873297208318, 0.05],\n      position: [3.6761316187794724, -4.141729519755186, -4.39063863430271],\n      rotation: [-0.7690386626408349, 1.4093151276977963, 2.0252977680762476]\n    },\n    {\n      args: [5.1426105440458216, 4.416201863189162, 0.05],\n      position: [0.646982562789564, 7.0909673302614196, -8.351518200349154],\n      rotation: [-0.0692356415822184, 1.918047448701773, 0.5268942683942657]\n    }\n  ]\n}\n\nexport const textData = [\n  {\n    position: [0, 0, -10],\n    rotation: [0, 0, 0],\n    scale: [1, 1, 1]\n  },\n  {\n    position: [0, 0, 10],\n    rotation: [0, 0, 0],\n    scale: [-1, 1, 1]\n  },\n  {\n    position: [-10, 0, 0],\n    rotation: [0, Math.PI / 2, 0],\n    scale: [1, 1, 1]\n  },\n  {\n    position: [10, 0, 0],\n    rotation: [0, -Math.PI / 2, 0],\n    scale: [-1, 1, 1]\n  },\n  {\n    position: [0, 10, 0],\n    rotation: [Math.PI / 2, 0, 0],\n    scale: [1, 1, 1]\n  },\n  {\n    position: [0, -10, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n    scale: [-1, 1, 1]\n  }\n]\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useResource } from 'react-three-fiber'\nimport { Text, Box, useMatcapTexture, Octahedron } from '@react-three/drei'\n\nimport useSlerp from './use-slerp'\nimport useLayers from './use-layers'\nimport useRenderTarget from './use-render-target'\n\nimport { ThinFilmFresnelMap } from './ThinFilmFresnelMap'\nimport { mirrorsData } from './data'\n\nconst TEXT_PROPS = {\n  fontSize: 2.2,\n  font: 'https://fonts.gstatic.com/s/syncopate/v12/pe0pMIuPIYBCpEV5eFdKvtKqBP5p.woff'\n}\n\nfunction Title({ layers, ...props }) {\n  const group = useRef()\n  useEffect(() => {\n    group.current.lookAt(0, 0, 0)\n  }, [])\n\n  const textRef = useLayers(layers)\n\n  return (\n    <group {...props} ref={group}>\n      <Text\n        ref={textRef}\n        name=\"text-panna\"\n        depthTest={false}\n        material-toneMapped={false}\n        material-color=\"#FFFFFF\"\n        {...TEXT_PROPS}>\n        Nobu Tech\n      </Text>\n    </group>\n  )\n}\n\nfunction Mirror({ sideMaterial, reflectionMaterial, args, layers, ...props }) {\n  const ref = useLayers(layers)\n\n  useFrame(() => {\n    if (ref.current) {\n      ref.current.rotation.y += 0.001\n      ref.current.rotation.z += 0.01\n    }\n  })\n\n  return (\n    <Box\n      {...props}\n      ref={ref}\n      args={args}\n      material={[sideMaterial, sideMaterial, sideMaterial, sideMaterial, reflectionMaterial, reflectionMaterial]}\n    />\n  )\n}\n\nfunction Mirrors({ envMap, layers, ...props }) {\n  const [thinFilmFresnelMap] = useState(new ThinFilmFresnelMap())\n  const sideMaterial = useResource()\n  const reflectionMaterial = useResource()\n\n  return (\n    <group name=\"mirrors\" {...props}>\n      <meshLambertMaterial ref={sideMaterial} map={thinFilmFresnelMap} color=\"#AAAAAA\" />\n      <meshLambertMaterial ref={reflectionMaterial} map={thinFilmFresnelMap} envMap={envMap} color=\"#FFFFFF\" />\n      {mirrorsData.mirrors.map((mirror, index) => (\n        <Mirror\n          key={`mirror-${index}`}\n          layers={layers}\n          {...mirror}\n          name={`mirror-${index}`}\n          sideMaterial={sideMaterial.current}\n          reflectionMaterial={reflectionMaterial.current}\n        />\n      ))}\n    </group>\n  )\n}\n\nfunction TitleCopies({ layers }) {\n  const vertices = useMemo(() => {\n    const y = new THREE.IcosahedronGeometry(10)\n    return y.vertices\n  }, [])\n\n  return (\n    <group name=\"titleCopies\">\n      {vertices.map((vertex, i) => (\n        <Title name={'titleCopy-' + i} key={'titleCopy-' + i} position={vertex} layers={layers} />\n      ))}\n    </group>\n  )\n}\n\nfunction Scene() {\n  const [cubeCamera, renderTarget] = useRenderTarget()\n  const group = useSlerp()\n\n  const [matcapTexture] = useMatcapTexture('C8D1DC_575B62_818892_6E747B')\n\n  return (\n    <>\n      <group name=\"sceneContainer\" ref={group}>\n        <Octahedron layers={[11]} name=\"background\" args={[20, 4, 4]} position={[0, 0, -5]}>\n          <meshMatcapMaterial matcap={matcapTexture} side={THREE.BackSide} transparent opacity={0.3} color=\"#FFFFFF\" />\n        </Octahedron>\n        <cubeCamera\n          layers={[11]}\n          name=\"cubeCamera\"\n          ref={cubeCamera}\n          args={[0.1, 100, renderTarget]}\n          position={[0, 0, 5]}\n        />\n        <Title name=\"title\" position={[0, 0, -10]} />\n        <TitleCopies layers={[11]} />\n        <Mirrors layers={[0, 11]} envMap={renderTarget.texture} />\n      </group>\n    </>\n  )\n}\n\nexport default Scene\n","import * as THREE from 'three'\nimport React, { useMemo, useEffect, useRef } from 'react'\nimport { useThree, useFrame, extend } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\n\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\n\n// Shader that composites the r,g,b channels of 3 textures, respectively\nconst triColorMix = {\n  uniforms: {\n    tDiffuse1: { value: null },\n    tDiffuse2: { value: null },\n    tDiffuse3: { value: null }\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\n    }\n  `,\n  fragmentShader: `\n    varying vec2 vUv;\n    uniform sampler2D tDiffuse1;\n    uniform sampler2D tDiffuse2;\n    uniform sampler2D tDiffuse3;\n    \n    void main() {\n      vec4 del0 = texture2D(tDiffuse1, vUv);\n      vec4 del1 = texture2D(tDiffuse2, vUv);\n      vec4 del2 = texture2D(tDiffuse3, vUv);\n      // min alpha hides until all buffers are full\n      float alpha = min(min(del0.a, del1.a), del2.a);\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\n    }\n  `\n}\n\nexport function Effects() {\n  const composer = useRef()\n  const savePass = useRef()\n  const blendPass = useRef()\n  const swap = useRef(false)\n  const { scene, gl, size, camera } = useThree()\n  const { rtA, rtB } = useMemo(() => {\n    const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\n    const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\n    return { rtA, rtB }\n  }, [size])\n  const pixelRatio = gl.getPixelRatio()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => {\n    composer.current.render()\n    // Swap render targets and update dependencies\n    let delay1 = swap.current ? rtB : rtA\n    let delay2 = swap.current ? rtA : rtB\n    savePass.current.renderTarget = delay2\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture\n    swap.current = !swap.current\n  }, 1)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <shaderPass attachArray=\"passes\" ref={blendPass} args={[triColorMix, 'tDiffuse1']} needsSwap={false} />\n      <savePass attachArray=\"passes\" ref={savePass} needsSwap={true} />\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        uniforms-resolution-value-x={1 / (size.width * pixelRatio)}\n        uniforms-resolution-value-y={1 / (size.height * pixelRatio)}\n      />\n      <shaderPass attachArray=\"passes\" args={[CopyShader]} />\n    </effectComposer>\n  )\n}\n","import React, { useLayoutEffect, useMemo, useRef } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { Effects } from './DotEffects'\nimport * as THREE from 'three'\n// import './styles.css'\n\n// Inspired by:\n// https://twitter.com/beesandbombs/status/1329796242298245124\n\nconst roundedSquareWave = (t, delta = 0.1, a = 1, f = 1 / 10) => {\n  // Equation from https://dsp.stackexchange.com/a/56529\n  // Visualized here https://www.desmos.com/calculator/uakymahh4u\n  return ((2 * a) / Math.PI) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta)\n}\n\nfunction Dots({ duration, ...props }) {\n  const ref = useRef()\n  const { positions, distances, transform, vec } = useMemo(() => {\n    const positions = [...Array(10000)].map(() => new THREE.Vector3())\n    const distances = [...Array(10000)]\n    const transform = new THREE.Matrix4()\n    const vec = new THREE.Vector3() // reusable\n    return { positions, distances, transform, vec }\n  }, [])\n  useLayoutEffect(() => {\n    const randomAmount = 0.3\n    const origin = new THREE.Vector3(0, 0, 0)\n    const right = new THREE.Vector3(1, 0, 0)\n    for (let i = 0; i < 10000; ++i) {\n      positions[i].set(Math.floor(i / 100) - 50 + (i % 2) * 0.5, (i % 100) - 50, 0)\n      positions[i].x += (Math.random() - 0.5) * randomAmount\n      positions[i].y += (Math.random() - 0.5) * randomAmount\n      distances[i] = positions[i].distanceTo(origin) + Math.cos(positions[i].angleTo(right) * 8) * 0.5\n      transform.setPosition(positions[i])\n      ref.current.setMatrixAt(i, transform)\n    }\n  }, [])\n  useFrame(({ clock }) => {\n    let dist, t, position, wave\n    for (let i = 0; i < 10000; ++i) {\n      position = positions[i]\n      dist = distances[i]\n      t = clock.elapsedTime - dist / 25 // wave is offset away from center\n      wave = roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, 1 / duration)\n      vec.copy(position).multiplyScalar(wave + 1.3)\n      transform.setPosition(vec)\n      ref.current.setMatrixAt(i, transform)\n    }\n    ref.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <instancedMesh args={[null, null, 10000]} ref={ref} {...props}>\n      <circleBufferGeometry args={[0.15, 8]} />\n      <meshBasicMaterial color={'white'} />\n    </instancedMesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas orthographic colorManagement={false} camera={{ position: [0, 0, 100], zoom: 20 }}>\n      <color attach=\"background\" args={['black']} />\n      <Dots duration={3.8} />\n      <Effects />\n    </Canvas>\n  )\n}\n","import { render } from 'react-dom'\nimport React, { Suspense } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { useProgress, Html } from '@react-three/drei'\nimport { BrowserRouter as Router, Switch, Route, NavLink, Redirect } from 'react-router-dom'\nimport usePath from './usePath'\n\nimport Scene1 from './Scene1'\n// import Scene2 from './Scene2'\n// import Scene3 from './Scene3'\nimport DotsScene from './DotsScene'\n\nimport './base.css'\n\nfunction Loader() {\n  const { progress } = useProgress()\n  return (\n    <Html center>\n      <span style={{ color: '#FFFFFF' }}>{progress} % loaded</span>\n    </Html>\n  )\n}\n\nfunction App(props) {\n  const { scene = 1 } = props\n  return (\n    <Canvas concurrent shadowMap camera={{ position: [0, 0, 5], fov: 70 }}>\n      <color attach=\"background\" args={['#000']} />\n      <Suspense fallback={<Loader />}>\n        {scene === 1 && <Scene1 />}\n        {/* {scene === 2 && <Scene2 />}\n        {scene === 3 && <Scene3 />} */}\n        {/* {scene === 'dots' && <DotsScene />} */}\n      </Suspense>\n      <ambientLight intensity={0.4} />\n    </Canvas>\n  )\n}\n\nfunction Body() {\n  const [path, setPath] = usePath()\n\n  // console.log(path, 'p')\n  return (\n    // <Router>\n    <main>\n      {/* <div className=\"frame\">\n\n        <div className=\"frame__demos\">\n          <NavLink to=\"/panna\" activeClassName=\"frame__demo--current\" className=\"frame__demo\">\n            PANNA\n          </NavLink>\n          <NavLink to=\"/olga\" activeClassName=\"frame__demo--current\" className=\"frame__demo\">\n            OLGA\n          </NavLink>\n          <NavLink to=\"/pedro\" activeClassName=\"frame__demo--current\" className=\"frame__demo\">\n            PEDRO\n          </NavLink>\n        </div>\n      </div> */}\n      <div className=\"content\">\n        {/* <App scene={1} /> */}\n        {/* <Switch>\n            <Route exact path=\"/\">\n              <App scene={1} />\n            </Route>\n\n            <Route exact path=\"/music\">\n              <DotsScene />\n            </Route>\n          </Switch> */}\n\n        {path === '' && <App scene={1} />}\n        {path === 'music' && <DotsScene />}\n\n        {/* <DotsScene /> */}\n      </div>\n    </main>\n    // </Router>\n  )\n}\n\nrender(<Body />, document.querySelector('#root'))\n"],"sourceRoot":""}